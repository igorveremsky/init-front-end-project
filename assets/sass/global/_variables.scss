// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

/**
    Calculate number with specific mode
 */
@function calculate($number, $mode: px, $responsive-size: 2560, $digits: 4) {
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }

    @if not unitless($number) {
        @return $number;
    }

    @if ($mode == vw) {
        @return decimal-round($number/$responsive-size, $digits)*100vw;
    } @else if ($mode == vh) {
        @return decimal-round($number/$responsive-size, $digits)*100vh;
    } @else if ($mode == em) {
        @return decimal-round($number/$responsive-size, $digits)*1em;
    } @else if ($mode == px) {
        @return $number*1px;
    } @else {
        @warn '#{ $mode } incorrect calculate mode.';
    }
}

// Responsive variables
// Axes Size Unit
$xSizeUnit: vw;
$ySizeUnit: vh;

// Design screen size
$screenWidth: 2560;
$screenHeight: 1440;

// Design tablet size
$tabletWidth: 768;
$tabletHeight: 1024;

// Design phone size
$phoneWidth: 320;
$phoneHeight: 568;

// Fonts
// Responsive
$screenFontSize: 18;
$tabletFontSize: 14;
$mobileFontSize: 12;

// Font breakpoints
$font-breakpoints: (
        sm: 14,
        md: 20,
);

// Titles
$titles-font-sizes: (
        h1: 100,
        h2: 80,
        h3: 60,
        h4: 50,
        h5: 24,
);

// Mobile
$titles-font-sizes-mobile: (
);

// Colors
// General
$color-full-black: #000; // black
$color-dark-black: #151515; // dark black
$color-light-black: #2c2c2c; // light-black
$color-dark-gray: #999999; // dark-gray
$color-gray: #808080; // gray
$color-light-gray: #d4d4d4; // light-gray
$color-dark-white: #eaeaea; // dark-white
$color-light-white: #f3f3f3; // light-white
$color-full-white: #fff; // full-white

// Application
$color-app-active: #fde3e0; // active (rose)
$color-app-alternative: #f3f3f3; // active (rose)
$color-app-light: #fff; // light
$color-app-dark: #000; // dark
$color-app-gray: #999999; // gray

// Animation
$color-animation-overlay: $color-app-light; // title overlay color

// Animations
// Transitions
$transition-duration-fast: .4s;
$transition-duration-slow: 3s;
$transition-timing-function: $easeInSine;

// Scale
$scaleMultiply: 1.2;

// Spaces
// General
$sectionSpace: 160;
$contentSpace: 90;
$contentSpaceMobile: 60;
$contentInnerSpace: 30;

// Additional
$headingSpace: 50;
$itemSpace: 30;
$innerSpaceLR: 50;
$btnSpaceLR: 30;

// Signature
$signatureHeight: 65;

// Btn sizes
$btnLineHeight: 1.25;
$btnFontSize: 20;
$btnSpaceTb: 15px;