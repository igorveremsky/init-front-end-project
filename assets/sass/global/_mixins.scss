@mixin breakpoint($breakpoint, $isMin: false) {
    @if map-has-key($grid-breakpoints, $breakpoint) {
        @if($isMin) {
            @media only screen and (min-width: #{map-get($grid-breakpoints, $breakpoint)}) {
                @content;
            }
        } @else {
            @media only screen and (max-width: #{map-get($grid-breakpoints, $breakpoint)}) {
                @content;
            }
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
    }
}

// Space
// General
@mixin space($size, $size-mode: px, $css-style: ml) {
    $design-size: $screenWidth;
    @if ($size-mode == vh) {
        $design-size: $screenHeight;
    }
    $space: calculate($size, $size-mode, $design-size);

    @if ($css-style == ml) {
        margin-left: $space;
    } @else if ($css-style == mr) {
        margin-right: $space;
    } @else if ($css-style == mt) {
        margin-top: $space;
    } @else if ($css-style == mb) {
        margin-bottom: $space;
    } @else if ($css-style == mtb) {
        margin-top: $space;
        margin-bottom: $space;
    } @else if ($css-style == mlr) {
        margin-left: $space;
        margin-right: $space;
    } @else if ($css-style == plr) {
        padding-left: $space;
        padding-right: $space;
    } @else if ($css-style == ptb) {
        padding-top: $space;
        padding-bottom: $space;
    } @else if ($css-style == pb) {
        padding-bottom: $space;
    } @else if ($css-style == pt) {
        padding-top: $space;
    } @else if ($css-style == pl) {
        padding-left: $space;
    } @else if ($css-style == pr) {
        padding-right: $space;
    } @else {
        @warn '#{ $css-style } is undefined keyword.';
    }
}

// Responsive Padding
@mixin space-responsive-padding-tb($size) {
    @include space($size, $ySizeUnit, ptb);
}

@mixin space-responsive-padding-lr($size) {
    @include space($size, $xSizeUnit, plr);
}

@mixin space-responsive-padding-l($size) {
    @include space($size, $xSizeUnit, pl);
}

@mixin space-responsive-padding-r($size) {
    @include space($size, $xSizeUnit, pr);
}

@mixin space-responsive-padding-b($size) {
    @include space($size, $ySizeUnit, pb);
}

@mixin space-responsive-padding-t($size) {
    @include space($size, $ySizeUnit, pt);
}

@mixin space-responsive-padding-round($size-tb, $size-lr) {
    @include space-responsive-padding-tb($size-tb);
    @include space-responsive-padding-lr($size-lr);
}

// Responsive Margin
@mixin space-responsive-margin-t($size) {
    @include space($size, $ySizeUnit, mt);
}

@mixin space-responsive-margin-b($size) {
    @include space($size, $ySizeUnit, mb);
}

@mixin space-responsive-margin-l($size) {
    @include space($size, $xSizeUnit, ml);
}

@mixin space-responsive-margin-r($size) {
    @include space($size, $xSizeUnit, mr);
}

@mixin space-responsive-margin-tb($size) {
    @include space($size, $ySizeUnit, mtb);
}

@mixin space-responsive-margin-lr($size) {
    @include space($size, $xSizeUnit, mlr);
}

@mixin space-responsive-margin-round($size-tb, $size-lr) {
    @include space-responsive-margin-tb($size-tb);
    @include space-responsive-margin-lr($size-lr);
}

// Font
// Breakpoints
@mixin responsive-font-size-breakpoint($breakpoint) {
    @if map-has-key($font-breakpoints, $breakpoint) {
        $size: map-get($font-breakpoints, $breakpoint);
        font-size: responsive-font-size($size);
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$space-breakpoints` map.";
    }
}

// Titles
@mixin responsive-font-size-title($breakpoint) {
    @if map-has-key($titles-font-sizes, $breakpoint) {
        $size: map-get($titles-font-sizes, $breakpoint);
        font-size: responsive-font-size($size);
        @if map-has-key($titles-font-sizes-mobile, $breakpoint) {
            @include breakpoint(sm) {
                font-size: map-get($titles-font-sizes-mobile, $breakpoint) * 1px;
            }
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$titles-font-sizes` map.";
    }
}

// Placeholder
@mixin input-placeholder {
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// Transition
@mixin transition-custom($property: all, $duration: $transition-duration-fast, $function: $transition-timing-function) {
    @include single-transition($property, $duration, $function);
}

// Animations
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }

    @-moz-keyframes #{$animationName} {
        @content;
    }

    @-o-keyframes #{$animationName} {
        @content;
    }

    @keyframes #{$animationName} {
        @content;
    }
}

@mixin animation ($animationName, $animationDuration, $animationTimingFunction: linear, $animationDelay: 0s, $isInfinite: true) {
    $animationPlayState: forwards;

    @if ($isInfinite) {
        $animationPlayState: infinite;
    }

    -webkit-animation: $animationName $animationDuration $animationTimingFunction $animationDelay $animationPlayState;
    -o-animation: $animationName $animationDuration $animationTimingFunction $animationDelay $animationPlayState;
    animation: $animationName $animationDuration $animationTimingFunction $animationDelay $animationPlayState;
}

// Row padding
@mixin row-content-space($screenSpace: $contentSpace, $mobileSpace: $contentSpaceMobile) {
    .row {
        &:not(:last-child) {
            @include space-responsive-padding-b($screenSpace);
        }
        &:not(.no-space) {
            > .w-100 {
                @include space-responsive-padding-b($screenSpace);
            }
            .w-100.d-lg-none,
            .w-100.d-md-none {
                @include space-responsive-padding-b($mobileSpace);
            }
        }
    }
}